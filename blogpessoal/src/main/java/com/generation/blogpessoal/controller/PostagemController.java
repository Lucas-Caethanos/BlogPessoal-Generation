package com.generation.blogpessoal.controller;

/*
Controller - ‚ÄúEnd point‚Äù, √© a camada respons√°vel por manipular todas as requisi√ß√µes feitas do lado de fora da nossa API,
essas requisi√ß√µes s√£o feitas atrav√©s de URL‚Äôs seguindo o protocolo HTTP.
 */

import com.generation.blogpessoal.model.Postagem;
import com.generation.blogpessoal.repository.PostagemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

/*
A anota√ß√£o @RestController define que a classe √© do tipo RestController, que receber√° requisi√ß√µes que ser√£o compostas por:
    URL: Endere√ßo da requisi√ß√£o (endpoint)
    Verbo: Define qual m√©todo HTTP ser√° acionado na Classe controladora.
    Corpo da requisi√ß√£o (Request Body): Objeto que cont√©m os dados que ser√£o persistidos no Banco de dadas.
    Nem toda a requisi√ß√£o enviar√° dados no Corpo da Requisi√ß√£o.

A anota√ß√£o @RequestMapping √© usada para mapear as solicita√ß√µes para os m√©todos da classe controladora PostagemController,
ou seja, definir a URL (endere√ßo) padr√£o do Recurso (/postagens).
Ao digitar a url do servidor seguida da url do Recurso (http://localhost:8080/posta gens),
o Spring envia a requisi√ß√£o para a Classe respons√°vel pelo Recurso associado √† este endere√ßo.

A anota√ß√£o @CrossOrigin indica que a classe controladora permitir√° o recebimento de requisi√ß√µes realizadas de fora do dom√≠nio
(localhost e futuramente do heroku quando o deploy for realizado) ao qual ela pertence.
 */
@RestController
@RequestMapping("/postagens")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class PostagemController {

    /*
    A anota√ß√£o @Autowired (Inje√ß√£o de Depend√™ncia), √© a implementa√ß√£o utilizada pelo Spring Framework
    para aplicar a Invers√£o de Controle (IoC) quando for necess√°rio.
    A Inje√ß√£o de Depend√™ncia define quais Classes ser√£o instanciadas e em quais lugares ser√£o injetadas quando houver necessidade.
     */
    @Autowired
    private PostagemRepository postagemRepository;

    /*
    A anota√ß√£o @GetMapping mapeia todas as Requisi√ß√µes HTTP GET, enviadas para um endere√ßo espec√≠fico, chamado endpoint,
    dentro do Recurso Postagem, para um M√©todo espec√≠fico que responder√° a requisi√ß√£o,
    ou seja, ele indica que o M√©todo getAll(), responder√° a todas as requisi√ß√µes do tipo HTTP GET,
    enviadas no endere√ßo http://localhost:8080/postagens/.
     */
    @GetMapping
    public ResponseEntity<List<Postagem>> getAll() {

        return ResponseEntity.ok(postagemRepository.findAll());
    }

    /*
    A anota√ß√£o @GetMapping("/{id}") mapeia todas as Requisi√ß√µes HTTP GET, enviadas para um endere√ßo espec√≠fico (Endpoint),
    dentro do Recurso Postagem, para um M√©todo espec√≠fico que responder√° as requisi√ß√µes, ou seja, ele indica que o M√©todo getById( Long id ),
    responder√° a todas as requisi√ß√µes do tipo HTTP GET, enviadas no endere√ßo http://localhost:808 0/postagens/id,
    onde id √© uma Vari√°vel de Caminho (Path Variable), que receber√° o id da Postagem que ser√° Consultada.

    O M√©todo getById(@PathVariable Long id) ser√° do tipo ResponseEntity porque ele responder√° Requisi√ß√µes HTTP (HTTP Request),
    com uma Resposta HTTP (HTTP Response). Observe que o M√©todo possui um par√¢metro do tipo Long, chamado id.

    @PathVariable Long id: Esta anota√ß√£o insere o valor enviado no endere√ßo do endpoint, na Vari√°vel de Caminho {id},
    no par√¢metro do M√©todo getById( Long id );
     */
    @GetMapping("/{id}")
    public ResponseEntity<Postagem> getById(@PathVariable Long id) {
        return postagemRepository.findById(id)
                .map(resp -> ResponseEntity.ok(resp))
                .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());

    }

    @GetMapping("/titulo/{titulo}")
    public ResponseEntity<List<Postagem>> getByTitulo(@PathVariable String titulo) {
        return ResponseEntity.ok(postagemRepository
                .findAllByTituloContainingIgnoreCase(titulo));
    }

    /*
    A anota√ß√£o @PostMapping indica que o M√©todo post(Postagem postagem), responder√° a todas as requisi√ß√µes do tipo HTTP POST,
    enviadas no endere√ßo http://localhost:8080/postagens.
    @Valid: Esta anota√ß√£o valida o Objeto Postagem enviado no Corpo da Requisi√ß√£o (Request Body),
    conforme as regras definidas na Model Postagem (@NotNull, @NotBlank, @Size e etc).
    @RequestBody Postagem postagem: Esta anota√ß√£o recebe o Objeto do tipo Postagem enviado no Corpo da Requisi√ß√£o (Request Body)
    e insere no par√¢metro Postagem do m√©todo post.

    ResponseEntity.status(HttpStatus.CREATED).body(postagemRepository.save(postagem));:
    Executa o M√©todo padr√£o da Interface JpaRepository (save(postagem)) e retorna o HTTP Status CREATEDü°™201 se o Objeto foi persistido no Banco de dados.
     */
    @PostMapping
    public ResponseEntity<Postagem> post(@Valid @RequestBody Postagem postagem) {
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(postagemRepository.save(postagem));
    }

    /*
    A anota√ß√£o @PutMapping indica que o M√©todo put(Postagem postagem), responder√° a todas as requisi√ß√µes do tipo HTTP PUT,
    enviadas no endere√ßo http://localhost:8080/postagens.
    @Valid: Esta anota√ß√£o valida o Objeto Postagem enviado no Corpo da Requisi√ß√£o (Request Body),
    conforme as regras definidas na Model Postagem (@NotNull, @NotBlank, @Size e etc).
    @RequestBody Postagem postagem: Esta anota√ß√£o recebe o Objeto do tipo Postagem enviado no Corpo da Requisi√ß√£o (Request Body)
    e insere no par√¢metro Postagem do m√©todo put.
     */
    @PutMapping
    public ResponseEntity<Postagem> put(@Valid @RequestBody Postagem postagem) {
        return postagemRepository.findById(postagem.getId())
                .map(resposta -> ResponseEntity.status(HttpStatus.OK)
                        .body(postagemRepository.save(postagem)))
                .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());
    }

    /*
    A anota√ß√£o @ResponseStatus indica que o M√©todo delete(Long id), ter√° uma Response Status espec√≠fica, ou seja,
    quando a Resposta da Requisi√ß√£o for positiva, ser√° retornado o HTTP Status NO_CONTENT ü°™ 204, ao inv√©s do HTTP Status OK ü°™ 200 como resposta padr√£o.
    A anota√ß√£o @DeleteMapping("/{id}") mapeia todas as Requisi√ß√µes HTTP DELETE, enviadas para um endere√ßo espec√≠fico (Endpoint),
    dentro do Recurso Postagem, para um M√©todo espec√≠fico que responder√° as requisi√ß√µes, ou seja,
    ele indica que o M√©todo delete( Long id ), responder√° a todas as requisi√ß√µes do tipo HTTP DELETE,
    enviadas no endere√ßo http://localhost: 8080/postagens/id, onde id √© uma Vari√°vel de Caminho (Path Variable), que receber√° o id da Postagem que ser√° Deletada.
    O M√©todo void delete(@PathVariable Long id) ser√° do tipo void porque ele responda Requisi√ß√µes HTTP (HTTP Request),
    ao deletar uma Postagem ela deixa de existir, logo n√£o tem nenhum tipo de retorno.
    Como configuramos a anota√ß√£o @ResponseStatus, ele devolver√° uma Resposta HTTP NO_CONTENT ü°™ 204, indicando que o Objeto deletado n√£o existe mais.
    Observe que o M√©todo possui um par√¢metro do tipo Long, chamado id.
    @PathVariable Long id: Esta anota√ß√£o insere o valor enviado no endere√ßo do endpoint,
    na Vari√°vel de Caminho {id}, no par√¢metro do M√©todo delete( Long id );
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        Optional<Postagem> postagem = postagemRepository.findById(id);

        if (postagem.isEmpty())
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);

        postagemRepository.deleteById(id);
    }

}


